{"name": "Validar geocoder para 'ROOSEVELT FRANKLIN D. AV. Y PACHECO'", "status": "failed", "statusDetails": {"message": "AssertionError: [ROOSEVELT FRANKLIN D. AV. Y PACHECO] Calles esperadas: {'PACHECO', 'ROOSEVELT FRANKLIN D. AV.'}, obtenidas: {'PACHECO', 'ROOSEVELT FRANKLIN D.'}\nassert {'PACHECO', '...NKLIN D. AV.'} == {'PACHECO', '... FRANKLIN D.'}\n  \n  Extra items in the left set:\n  'ROOSEVELT FRANKLIN D. AV.'\n  Extra items in the right set:\n  'ROOSEVELT FRANKLIN D.'\n  Use -v to get more diff", "trace": "caso = {'archivo': 'direccion_total_cruces.json', 'direccion': 'ROOSEVELT FRANKLIN D. AV. Y PACHECO', 'metodo_geocodificacion': 'Interseccion entre Calles', 'nombreCalle_1': 'ROOSEVELT FRANKLIN D. AV.', ...}\n\n    @pytest.mark.parametrize(\"caso\", cargar_casos())\n    @allure.epic(\"Validaciones de geocoder\")\n    @allure.feature(\"Geocoder con cruces totales\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Validación del endpoint **/geocoder** verificando que los atributos\n    `direccion`, `nombreCalle_1`, `nombreCalle_2`, `metodo_geocodificacion` y `tipoDireccion`\n    coincidan con lo definido en el archivo JSON.\n    \"\"\")\n    def test_datos_geocoder_con_atributos(caso):\n        direccion = caso[\"direccion\"]\n    \n        allure.dynamic.title(f\"Validar geocoder para '{direccion}'\")\n        allure.dynamic.parameter(\"Dirección\", direccion)\n        allure.dynamic.parameter(\"Archivo origen\", caso[\"archivo\"])\n    \n        with allure.step(\"Ejecutar request al endpoint\"):\n            response = requests.get(\n                ENDPOINTS[\"geocoder\"],\n                params={\"direccion\": direccion, \"v2\": \"true\"}\n            )\n            allure.attach(response.url, name=\"🔗 Request URL\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(response.text, name=\"📦 Response JSON\", attachment_type=allure.attachment_type.JSON)\n    \n        with allure.step(\"Verificar status code 200\"):\n            assert response.status_code == 200, f\"Error HTTP para {direccion}\"\n    \n        data = response.json().get(\"data\", {})\n    \n        # 👇 Reemplaza los dos pasos anteriores (nombreCalle_1 y nombreCalle_2) por este:\n        with allure.step(\"Validar calles de la intersección (orden no importa)\"):\n            esperado = {caso[\"nombreCalle_1\"], caso[\"nombreCalle_2\"]}\n            obtenido = {data.get(\"nombreCalle_1\"), data.get(\"nombreCalle_2\")}\n>           assert esperado == obtenido, (\n                f\"[{direccion}] Calles esperadas: {esperado}, obtenidas: {obtenido}\"\n            )\nE           AssertionError: [ROOSEVELT FRANKLIN D. AV. Y PACHECO] Calles esperadas: {'PACHECO', 'ROOSEVELT FRANKLIN D. AV.'}, obtenidas: {'PACHECO', 'ROOSEVELT FRANKLIN D.'}\nE           assert {'PACHECO', '...NKLIN D. AV.'} == {'PACHECO', '... FRANKLIN D.'}\nE             \nE             Extra items in the left set:\nE             'ROOSEVELT FRANKLIN D. AV.'\nE             Extra items in the right set:\nE             'ROOSEVELT FRANKLIN D.'\nE             Use -v to get more diff\n\ntests_v2.0.3\\geocoder\\test_cruces_total.py:62: AssertionError"}, "description": "\nValidación del endpoint **/geocoder** verificando que los atributos\n`direccion`, `nombreCalle_1`, `nombreCalle_2`, `metodo_geocodificacion` y `tipoDireccion`\ncoincidan con lo definido en el archivo JSON.\n", "steps": [{"name": "Ejecutar request al endpoint", "status": "passed", "attachments": [{"name": "🔗 Request URL", "source": "a90c30f6-ef9c-4f83-8e28-fff93a6d371d-attachment.txt", "type": "text/plain"}, {"name": "📦 Response JSON", "source": "7a8dab4f-9cb2-4303-8e79-3a3ef0be3f42-attachment.json", "type": "application/json"}], "start": 1758717236622, "stop": 1758717236689}, {"name": "Verificar status code 200", "status": "passed", "start": 1758717236689, "stop": 1758717236689}, {"name": "Validar calles de la intersección (orden no importa)", "status": "failed", "statusDetails": {"message": "AssertionError: [ROOSEVELT FRANKLIN D. AV. Y PACHECO] Calles esperadas: {'PACHECO', 'ROOSEVELT FRANKLIN D. AV.'}, obtenidas: {'PACHECO', 'ROOSEVELT FRANKLIN D.'}\nassert {'PACHECO', '...NKLIN D. AV.'} == {'PACHECO', '... FRANKLIN D.'}\n  \n  Extra items in the left set:\n  'ROOSEVELT FRANKLIN D. AV.'\n  Extra items in the right set:\n  'ROOSEVELT FRANKLIN D.'\n  Use -v to get more diff\n", "trace": "  File \"C:\\Users\\27960443689\\Desktop\\backup\\API_SERVICIO_GEO\\PY_TEST_APISG\\tests_v2.0.3\\geocoder\\test_cruces_total.py\", line 62, in test_datos_geocoder_con_atributos\n    assert esperado == obtenido, (\n"}, "start": 1758717236689, "stop": 1758717236692}], "parameters": [{"name": "caso", "value": "{'direccion': 'ROOSEVELT FRANKLIN D. AV. Y PACHECO', 'nombreCalle_1': 'ROOSEVELT FRANKLIN D. AV.', 'nombreCalle_2': 'PACHECO', 'metodo_geocodificacion': 'Interseccion entre Calles', 'tipoDireccion': 'calle_calle', 'archivo': 'direccion_total_cruces.json'}"}, {"name": "Dirección", "value": "'ROOSEVELT FRANKLIN D. AV. Y PACHECO'"}, {"name": "Archivo origen", "value": "'direccion_total_cruces.json'"}], "start": 1758717236622, "stop": 1758717236692, "uuid": "ba3e589f-1c46-4443-839b-87a3267024f7", "historyId": "90d555beb97057a7e31413e1d11d22a3", "testCaseId": "619eca6dbb133aa78bebb5ab7e1ce151", "fullName": "tests_v2.0.3.geocoder.test_cruces_total#test_datos_geocoder_con_atributos", "labels": [{"name": "feature", "value": "Geocoder con cruces totales"}, {"name": "severity", "value": "normal"}, {"name": "epic", "value": "Validaciones de geocoder"}, {"name": "parentSuite", "value": "tests_v2.0.3.geocoder"}, {"name": "suite", "value": "test_cruces_total"}, {"name": "host", "value": "SECITD-P197C6K"}, {"name": "thread", "value": "10164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_v2.0.3.geocoder.test_cruces_total"}]}