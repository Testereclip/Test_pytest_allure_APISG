{"name": "Validar geocoder para 'LARRAZABAL AV. Y GARCIA DE COSSIO'", "status": "failed", "statusDetails": {"message": "AssertionError: [LARRAZABAL AV. Y GARCIA DE COSSIO] Calles esperadas: {'GARCIA DE COSSIO', 'LARRAZABAL AV.'}, obtenidas: {'LARRAZABAL', 'GARCIA DE COSSIO'}\nassert {'GARCIA DE C...RRAZABAL AV.'} == {'GARCIA DE C... 'LARRAZABAL'}\n  \n  Extra items in the left set:\n  'LARRAZABAL AV.'\n  Extra items in the right set:\n  'LARRAZABAL'\n  Use -v to get more diff", "trace": "caso = {'archivo': 'direccion_total_cruces.json', 'direccion': 'LARRAZABAL AV. Y GARCIA DE COSSIO', 'metodo_geocodificacion': 'Interseccion entre Calles', 'nombreCalle_1': 'LARRAZABAL AV.', ...}\n\n    @pytest.mark.parametrize(\"caso\", cargar_casos())\n    @allure.epic(\"Validaciones de geocoder\")\n    @allure.feature(\"Geocoder con cruces totales\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Validación del endpoint **/geocoder** verificando que los atributos\n    `direccion`, `nombreCalle_1`, `nombreCalle_2`, `metodo_geocodificacion` y `tipoDireccion`\n    coincidan con lo definido en el archivo JSON.\n    \"\"\")\n    def test_datos_geocoder_con_atributos(caso):\n        direccion = caso[\"direccion\"]\n    \n        allure.dynamic.title(f\"Validar geocoder para '{direccion}'\")\n        allure.dynamic.parameter(\"Dirección\", direccion)\n        allure.dynamic.parameter(\"Archivo origen\", caso[\"archivo\"])\n    \n        with allure.step(\"Ejecutar request al endpoint\"):\n            response = requests.get(\n                ENDPOINTS[\"geocoder\"],\n                params={\"direccion\": direccion, \"v2\": \"true\"}\n            )\n            allure.attach(response.url, name=\"🔗 Request URL\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(response.text, name=\"📦 Response JSON\", attachment_type=allure.attachment_type.JSON)\n    \n        with allure.step(\"Verificar status code 200\"):\n            assert response.status_code == 200, f\"Error HTTP para {direccion}\"\n    \n        data = response.json().get(\"data\", {})\n    \n        # 👇 Reemplaza los dos pasos anteriores (nombreCalle_1 y nombreCalle_2) por este:\n        with allure.step(\"Validar calles de la intersección (orden no importa)\"):\n            esperado = {caso[\"nombreCalle_1\"], caso[\"nombreCalle_2\"]}\n            obtenido = {data.get(\"nombreCalle_1\"), data.get(\"nombreCalle_2\")}\n>           assert esperado == obtenido, (\n                f\"[{direccion}] Calles esperadas: {esperado}, obtenidas: {obtenido}\"\n            )\nE           AssertionError: [LARRAZABAL AV. Y GARCIA DE COSSIO] Calles esperadas: {'GARCIA DE COSSIO', 'LARRAZABAL AV.'}, obtenidas: {'LARRAZABAL', 'GARCIA DE COSSIO'}\nE           assert {'GARCIA DE C...RRAZABAL AV.'} == {'GARCIA DE C... 'LARRAZABAL'}\nE             \nE             Extra items in the left set:\nE             'LARRAZABAL AV.'\nE             Extra items in the right set:\nE             'LARRAZABAL'\nE             Use -v to get more diff\n\ntests_v2.0.3\\geocoder\\test_cruces_total.py:62: AssertionError"}, "description": "\nValidación del endpoint **/geocoder** verificando que los atributos\n`direccion`, `nombreCalle_1`, `nombreCalle_2`, `metodo_geocodificacion` y `tipoDireccion`\ncoincidan con lo definido en el archivo JSON.\n", "steps": [{"name": "Ejecutar request al endpoint", "status": "passed", "attachments": [{"name": "🔗 Request URL", "source": "bd016435-2add-4c28-8a34-60f1596aee27-attachment.txt", "type": "text/plain"}, {"name": "📦 Response JSON", "source": "5dc67072-cd66-480f-a450-39658afceb6c-attachment.json", "type": "application/json"}], "start": 1758716886403, "stop": 1758716886468}, {"name": "Verificar status code 200", "status": "passed", "start": 1758716886468, "stop": 1758716886468}, {"name": "Validar calles de la intersección (orden no importa)", "status": "failed", "statusDetails": {"message": "AssertionError: [LARRAZABAL AV. Y GARCIA DE COSSIO] Calles esperadas: {'GARCIA DE COSSIO', 'LARRAZABAL AV.'}, obtenidas: {'LARRAZABAL', 'GARCIA DE COSSIO'}\nassert {'GARCIA DE C...RRAZABAL AV.'} == {'GARCIA DE C... 'LARRAZABAL'}\n  \n  Extra items in the left set:\n  'LARRAZABAL AV.'\n  Extra items in the right set:\n  'LARRAZABAL'\n  Use -v to get more diff\n", "trace": "  File \"C:\\Users\\27960443689\\Desktop\\backup\\API_SERVICIO_GEO\\PY_TEST_APISG\\tests_v2.0.3\\geocoder\\test_cruces_total.py\", line 62, in test_datos_geocoder_con_atributos\n    assert esperado == obtenido, (\n"}, "start": 1758716886468, "stop": 1758716886472}], "parameters": [{"name": "caso", "value": "{'direccion': 'LARRAZABAL AV. Y GARCIA DE COSSIO', 'nombreCalle_1': 'LARRAZABAL AV.', 'nombreCalle_2': 'GARCIA DE COSSIO', 'metodo_geocodificacion': 'Interseccion entre Calles', 'tipoDireccion': 'calle_calle', 'archivo': 'direccion_total_cruces.json'}"}, {"name": "Dirección", "value": "'LARRAZABAL AV. Y GARCIA DE COSSIO'"}, {"name": "Archivo origen", "value": "'direccion_total_cruces.json'"}], "start": 1758716886403, "stop": 1758716886473, "uuid": "221c5bdf-1e26-4f2c-92ac-7dec387ef826", "historyId": "216d929484acb6a19d950a09e8f19b92", "testCaseId": "619eca6dbb133aa78bebb5ab7e1ce151", "fullName": "tests_v2.0.3.geocoder.test_cruces_total#test_datos_geocoder_con_atributos", "labels": [{"name": "feature", "value": "Geocoder con cruces totales"}, {"name": "severity", "value": "normal"}, {"name": "epic", "value": "Validaciones de geocoder"}, {"name": "parentSuite", "value": "tests_v2.0.3.geocoder"}, {"name": "suite", "value": "test_cruces_total"}, {"name": "host", "value": "SECITD-P197C6K"}, {"name": "thread", "value": "10164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_v2.0.3.geocoder.test_cruces_total"}]}